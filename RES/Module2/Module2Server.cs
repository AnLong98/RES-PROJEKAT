///////////////////////////////////////////////////////////
//  Module2Server.cs
//  Implementation of the Class Module2Server
//  Generated by Enterprise Architect
//  Created on:      18-May-2020 4:57:20 PM
//  Original author: Predrag
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Common;
using System.ServiceModel;

namespace Module2
{

    public class Module2Server
    {

        private ILogging logger;
        private Module2ServiceProvider serviceProvider;
        private ServiceHost serviceHost;
        private static readonly string directUpdateEndpoint = "net.tcp://localhost:10100/Module2DirectUpdate";
        private static readonly string updateEndpoint = "net.tcp://localhost:10100/Module2Update";
        private static readonly string historyReadingEndpoint = "net.tcp://localhost:10100/Module2History";
        

        ~Module2Server()
        {
            this.Stop();
        }

        public Module2Server(ILogging logger)
        {
            this.logger = logger;
            serviceProvider = new Module2ServiceProvider(logger);
            serviceHost = new ServiceHost(serviceProvider);
            serviceHost.AddServiceEndpoint(typeof(IModule2DirectUpdate), new NetTcpBinding(), directUpdateEndpoint);
            serviceHost.AddServiceEndpoint(typeof(IModule2Update), new NetTcpBinding(), updateEndpoint);
            serviceHost.AddServiceEndpoint(typeof(IModule2History), new NetTcpBinding(), historyReadingEndpoint);

        }

        public void Start()
        {
            logger.LogNewInfo("Trying to open server..");
            try
            {
                serviceHost.Open();
                logger.LogNewInfo("Server started");
            }
            catch(Exception ex)
            {
                logger.LogNewWarning(string.Format("Failed to open server, an error occured ERROR MESSAGE:{0}..", ex.Message));
            }

        }

        public void Stop()
        {
            logger.LogNewInfo("Trying to stop the server..");
            try
            {
                serviceHost.Close();
                logger.LogNewInfo("Server stopped");
            }
            catch (Exception ex)
            {
                logger.LogNewWarning(string.Format("Failed to close server, an error occured ERROR MESSAGE:{0}..", ex.Message));
            }
        }
    }
}//end Module2Server
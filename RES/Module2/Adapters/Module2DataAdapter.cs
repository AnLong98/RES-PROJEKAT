///////////////////////////////////////////////////////////
//  Module2DataAdapter.cs
//  Implementation of the Class Module2DataAdapter
//  Generated by Enterprise Architect
//  Created on:      18-May-2020 4:57:20 PM
//  Original author: Predrag
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Common;

namespace Module2 {
    public class Module2DataAdapter : IModule2DataAdapting
    {

	    private ILogging logger;


	    /// 
	    /// <param name="logger">Logger for this module</param>
	    public Module2DataAdapter(ILogging logger){
            this.logger = logger;
	    }

        public Module2DataAdapter()
        {

        }

	    /// 
	    /// <param name="signal">Signal code</param>
	    /// <param name="value">Signal value</param>
	    public IModule2Property PackToModule2Property(SignalCode signal, double value){
            logger.LogNewInfo(string.Format("Packing module 2 property for signal {0} and value {1}", signal, value));
            return new Module2Property(signal, value);
	    }

	    /// 
	    /// <param name="description">Description of dataset from module 1</param>
	    public ICollectionDescription RepackToCollectionDescription(IDescription description)
        { 
            int id = description.ID;
            Dataset dataset = description.Dataset;

            logger.LogNewInfo(string.Format("Repacking description with dataset {0} and id {1} to Collection description.", dataset, id));
            List<IModule2Property> properties = new List<IModule2Property>();
            List<SignalCode> processedSignals = new List<SignalCode>();

            foreach(IModule1Property property in description.Properties())
            {
                if(processedSignals.Contains(property.Code))
                {
                    logger.LogNewWarning("Two signals of the same type in one description");
                    throw new ArgumentException("ERROR Two signals of the same type in one description");
                }
                if (DatasetRepository.GetDataset(property.Code) != dataset)
                {
                     logger.LogNewWarning(string.Format("Received dataset {0} does not match dataset for signal {1}", dataset, property.Code));
                     throw new ArgumentException("Data set does not match signal.");
                }

                processedSignals.Add(property.Code);
                properties.Add(RepackToModule2Property(property));
            }

            HistoricalCollection historicalCollection = new HistoricalCollection(properties);
            CollectionDescription repackedData = new CollectionDescription(id, dataset, historicalCollection);
            logger.LogNewInfo("Data repacked to collection description successfully");
            return repackedData;
	    }

	    /// 
	    /// <param name="listDescription">List description from module 1</param>
	    public List<ICollectionDescription> RepackToCollectionDescriptionArray(IListDescription listDescription){

            logger.LogNewInfo("Repacking List description to Collection description array");
            List<ICollectionDescription> collectionDescriptions = new List<ICollectionDescription>();

            foreach(IDescription description in listDescription.Descriptions)
            {
                collectionDescriptions.Add(RepackToCollectionDescription(description));
            }

            logger.LogNewInfo("Repacking List description to Collection description array completed");
            return collectionDescriptions;
        }

	    /// 
	    /// <param name="module1Property">Module 1 property to be repacked</param>
	    public IModule2Property RepackToModule2Property(IModule1Property module1Property){

            logger.LogNewInfo(string.Format("Repacking module 1 property with code {0} and value {1} to Module 2 property.", module1Property.Code, module1Property.Module1Value));
            Module2Property property = new Module2Property(module1Property.Code, module1Property.Module1Value);

            return property;
	    }

    }//end Module2DataAdapter
}


